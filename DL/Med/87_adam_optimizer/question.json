{
    "qid": 87,
    "title": "Adam Optimizer",
    "qtext": "Implement the Adam optimizer update step function. Your function should take the current parameter value, gradient, and moving averages as inputs, and return the updated parameter value and new moving averages. The function should also handle scalar and array inputs and include bias correction for the moving averages.\n\nExample:\nInput:\nparameter = 1.0, grad = 0.1, m = 0.0, v = 0.0, t = 1\n\nOutput:\n(0.999, 0.01, 0.0001)\n\nReasoning:\nThe Adam optimizer computes updated values for the parameter, first moment (m), and second moment (v) using bias-corrected estimates of gradients. With input values parameter=1.0, grad=0.1, m=0.0, v=0.0, and t=1, the updated parameter becomes 0.999.",
    "inputFormat": "parameter = 1.0, grad = 0.1, m = 0.0, v = 0.0, t = 1",
    "outputFormat": "(0.999, 0.01, 0.0001)",
    "reason": "The Adam optimizer computes updated values for the parameter, first moment (m), and second moment (v) using bias-corrected estimates of gradients. With input values parameter=1.0, grad=0.1, m=0.0, v=0.0, and t=1, the updated parameter becomes 0.999.",
    "learnAbout": "Implementing Adam Optimizer\n\n**Introduction**\n\nAdam (Adaptive Moment Estimation) is a popular optimization algorithm used in training deep learning models. It combines the benefits of two other optimization algorithms: RMSprop and momentum optimization.\n\n**Learning Objectives**\n- Understand how Adam optimizer works\n- Learn to implement adaptive learning rates\n- Understand bias correction in optimization algorithms\n- Gain practical experience with gradient-based optimization\n\n**Theory**\n\nAdam maintains moving averages of both gradients (first moment) and squared gradients (second moment) to adapt the learning rate for each parameter. The key equations are:\n\n$$\nm_t = \\beta_1 m_{t-1} + (1 - \\beta_1) g_t\n$$\n(First moment)\n\n$$\nv_t = \\beta_2 v_{t-1} + (1 - \\beta_2) g_t^2\n$$\n(Second moment)\n\nBias correction:\n\n$$\n\\hat{m}_t = \\frac{m_t}{1 - \\beta_1^t}\n$$\n\n$$\n\\hat{v}_t = \\frac{v_t}{1 - \\beta_2^t}\n$$\n\nParameter update:\n\n$$\n\\theta_t = \\theta_{t-1} - \\alpha \\frac{\\hat{m}_t}{\\sqrt{\\hat{v}_t} + \\epsilon}\n$$\n\n**Problem Statement**\n\nImplement the Adam optimizer update step function. Your function should take the current parameter value, gradient, and moving averages as inputs, and return the updated parameter value and new moving averages.\n\n**Input Format**\nThe function should accept:\n- parameter: Current parameter value\n- grad: Current gradient\n- m: First moment estimate\n- v: Second moment estimate\n- t: Current timestep\n- learning_rate: Learning rate (default=0.001)\n- beta1: First moment decay rate (default=0.9)\n- beta2: Second moment decay rate (default=0.999)\n- epsilon: Small constant for numerical stability (default=1e-8)\n\n**Output Format**\nReturn tuple: (updated_parameter, updated_m, updated_v)\n\n**Example**\n\nExample usage:\n\n```python\nparameter = 1.0\ngrad = 0.1\nm = 0.0\nv = 0.0\nt = 1\n\nnew_param, new_m, new_v = adam_optimizer(parameter, grad, m, v, t)\n```\n\n**Tips**\n- Initialize m and v as zeros\n- Keep track of timestep t for bias correction\n- Use numpy for numerical operations\n- Test with both scalar and array inputs"
  }
  