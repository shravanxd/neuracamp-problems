{
    "qid": 66,
    "title": "Implement Orthogonal Projection of a Vector onto a Line",
    "qtext": "Task: Compute the Orthogonal Projection of a Vector\n\nYour task is to implement a function that calculates the orthogonal projection of a vector v onto another vector L. This projection results in the vector on L that is closest to v.\n\nWrite a function `orthogonal_projection(v, L)` that takes in two lists, `v` (the vector to be projected) and `L` (the line vector), and returns the orthogonal projection of `v` onto `L`. The function should output a list representing the projection vector rounded to three decimal places.\n\nExample:\n\nInput:\n```python\nv = [3, 4]\nL = [1, 0]\nprint(orthogonal_projection(v, L))\n```\n\nOutput:\n```python\n[3.0, 0.0]\n```\n\nReasoning:\nThe orthogonal projection of vector [3, 4] onto the line defined by [1, 0] results in the projection vector [3, 0], which lies on the line [1, 0].",
    "inputFormat": "Two inputs:\n- `v` (list): A list representing the vector to be projected.\n- `L` (list): A list representing the line vector.",
    "outputFormat": "A list representing the projected vector, rounded to three decimal places.",
    "reason": "The orthogonal projection of a vector onto another vector finds the closest point along that vector, crucial for applications in graphics, optimization, and dimension reduction.",
    "learnAbout": "Understanding Orthogonal Projection in Vector Spaces\n\nOrthogonal projection is a fundamental concept in linear algebra, used to project one vector onto another. The projection of vector v onto a line defined by vector L results in a new vector that lies on L, representing the closest point to v on that line. This can be thought of as vâ€™s shadow on L if a light was shown directly down on v.\n\nTo project a vector v onto a non-zero vector L in space, we calculate the scalar projection of v onto the unit vector of L, which represents the magnitude of the projection. The resulting projection vector lies along the direction of L.\n\nFor any vector v in Cartesian space, the orthogonal projection onto L is calculated using the formula:\n\n$$\n\\text{proj}_L(v) = \\frac{v \\cdot L}{L \\cdot L} L\n$$\n\nWhere:\n\n1. v is the vector being projected,\n2. L is the vector defining the line of projection,\n3. v \\cdot L is the dot product of v and L,\n4. L \\cdot L is the dot product of L with itself, which gives the magnitude squared of L.\n\nThe resulting projection vector lies along the direction of L and represents the component of v that is parallel to L.\n\nMore generally, the projection of v onto a unit vector \\( \\hat{L} \\) (the normalized version of L) simplifies to:\n\n$$\n\\text{proj}_L(v) = (v \\cdot \\hat{L})\\hat{L}\n$$\n\nApplications of Orthogonal Projection\n\nOrthogonal projection has a wide range of applications across various fields in mathematics, physics, computer science, and engineering.\n\nSome of the most common applications include:\n\n1. **Computer Graphics**: In 3D rendering, orthogonal projections are used to create 2D views of 3D objects. This projection helps in reducing dimensional complexity and displaying models from different angles.\n\n2. **Data Science and Machine Learning**: In high-dimensional data, projection methods are used to reduce dimensions (e.g., Principal Component Analysis) by projecting data onto lower-dimensional subspaces, helping with data visualization and reducing computational complexity."
  }  